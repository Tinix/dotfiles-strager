https://code.launchpad.net/~stragerneds/duplicity/duplicity/+merge/369499

committer: Matthew Glazar <strager.nds+launchpad@gmail.com>
message:
  Optimize loading backup chains; reduce file_naming.parse calls

  For each filename in filename_list,
  CollectionsStatus.get_backup_chains calls file_naming.parse
  (through BackupSet.add_filename) between 0 and len(sets)*2
  times. In the worst case, this leads to a *ton* of redundant
  calls to file_naming.parse.

  For example, when running 'duplicity collection-status' on
  one of my backup directories:

  * filename_list contains 7545 files
  * get_backup_chains creates 2515 BackupSet-s
  * get_backup_chains calls file_naming.parse 12650450 times!

  This command took 9 minutes and 32 seconds. Similar
  commands, like no-op incremental backups, also take a long
  time. (The directory being backed up contains only 9 MiB
  across 30 files.)

  Avoid many redundant calls to file_naming.parse by hoisting
  the call outside the loop over BackupSet-s. This
  optimization makes 'duplicity collection-status' *20 times
  faster* for me (572 seconds -> 29 seconds).

  Aside from improving performance, this commit should not
  change behavior.

--- a/duplicity/collections.py	2018-02-01 21:17:08 +0000
+++ b/duplicity/collections.py	2019-07-01 06:45:01 +0000
@@ -68,7 +68,7 @@
         """
         return self.remote_manifest_name

-    def add_filename(self, filename):
+    def add_filename(self, filename, pr=None):
         """
         Add a filename to given set.  Return true if it fits.

@@ -78,8 +78,12 @@

         @param filename: name of file to add
         @type filename: string
+
+        @param pr: pre-computed result of file_naming.parse(filename)
+        @type pr: Optional[ParseResults]
         """
-        pr = file_naming.parse(filename)
+        if not pr:
+            pr = file_naming.parse(filename)
         if not pr or not (pr.type == "full" or pr.type == "inc"):
             return False

@@ -820,14 +824,15 @@
             """
             Try adding filename to existing sets, or make new one
             """
+            pr = file_naming.parse(filename)
             for set in sets:
-                if set.add_filename(filename):
+                if set.add_filename(filename, pr):
                     log.Debug(_("File %s is part of known set") % (util.ufn(filename),))
                     break
             else:
                 log.Debug(_("File %s is not part of a known set; creating new set") % (util.ufn(filename),))
                 new_set = BackupSet(self.backend, self.action)
-                if new_set.add_filename(filename):
+                if new_set.add_filename(filename, pr):
                     sets.append(new_set)
                 else:
                     log.Debug(_("Ignoring file (rejected by backup set) '%s'") % util.ufn(filename))
