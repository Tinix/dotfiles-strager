#!/usr/bin/env python

import argparse
import pathlib
import shutil
import subprocess
import sys
import tempfile
import typing
import unittest


def main() -> None:
    args = parse_args(sys.argv)
    if args.self_test:
        sys.argv[1:] = []
        unittest.main()
        sys.exit(1)  # unittest.main should have exited for us.

    grep_replace(
        pattern=args.pattern,
        replacement=args.replacement,
        paths=args.paths,
    )


def parse_args(argv: typing.List[str]):
    if argv[1:] == ["--self-test"]:
        return argparse.Namespace(self_test=True)

    parser = argparse.ArgumentParser()
    parser.add_argument("--self-test", action="store_true")
    parser.add_argument("pattern", metavar="PATTERN")
    parser.add_argument("replacement", metavar="REPLACEMENT")
    parser.add_argument(
        "paths",
        metavar="PATH",
        nargs="*",
        default=[pathlib.Path(".")],
        type=pathlib.Path,
    )
    return parser.parse_args(argv[1:])


class TestArgs(unittest.TestCase):
    def test_two_args(self) -> None:
        args = parse_args(["srr", "from", "to"])
        self.assertEqual(args.pattern, "from")
        self.assertEqual(args.replacement, "to")
        self.assertEqual(args.paths, [pathlib.Path(".")])

    def test_one_file_path(self) -> None:
        args = parse_args(["srr", "from", "to", "file.txt"])
        self.assertEqual(args.pattern, "from")
        self.assertEqual(args.replacement, "to")
        self.assertEqual(args.paths, [pathlib.Path("file.txt")])

    def test_many_file_paths(self) -> None:
        args = parse_args(["srr", "from", "to", "dir1/", "dir2/", "dir3/"])
        self.assertEqual(args.pattern, "from")
        self.assertEqual(args.replacement, "to")
        self.assertEqual(
            args.paths,
            [pathlib.Path("dir1/"), pathlib.Path("dir2/"), pathlib.Path("dir3/")],
        )


class TestGrepReplace(unittest.TestCase):
    _temp_dir: pathlib.Path = None

    def setUp(self) -> None:
        self._temp_dir = pathlib.Path(tempfile.mkdtemp(prefix="strager-test-srr-"))

    def tearDown(self) -> None:
        if self._temp_dir is not None:
            shutil.rmtree(self._temp_dir)
            self._temp_dir = None

    def test_grep_replace_in_one_file_replaces_all_instances(self) -> None:
        path = self._temp_dir / "file.txt"
        path.write_text("hello world\nI say hello\n")

        results = grep_replace(pattern="hello", replacement="goodbye", paths=[path])

        self.assertEqual(path.read_text(), "goodbye world\nI say goodbye\n")
        self.assertTrue(results.changed_files)

    def test_grep_replace_in_directory_replaces_multiple_files(self) -> None:
        hello_txt = self._temp_dir / "hello.txt"
        hello_txt.write_text("hello world\n")
        other_txt = self._temp_dir / "dir" / "other.txt"
        other_txt.parent.mkdir()
        other_txt.write_text("I say hello\n")

        results = grep_replace(
            pattern="hello", replacement="goodbye", paths=[self._temp_dir]
        )

        self.assertEqual(hello_txt.read_text(), "goodbye world\n")
        self.assertEqual(other_txt.read_text(), "I say goodbye\n")
        self.assertTrue(results.changed_files)

    def test_grep_replace_reports_no_matches_in_directory(self) -> None:
        hello_txt = self._temp_dir / "hello.txt"
        hello_txt.write_text("This file does not contain the search pattern.\n")

        results = grep_replace(
            pattern="hello", replacement="goodbye", paths=[self._temp_dir]
        )

        self.assertFalse(results.changed_files)

    def test_grep_replace_does_not_modify_git_ignored_files_or_directories(
        self,
    ) -> None:
        subprocess.check_call(["git", "init"], cwd=self._temp_dir)

        (self._temp_dir / ".gitignore").write_text("/ignoreddir/\nignored.txt\n")
        ignored_txt = self._temp_dir / "ignored.txt"
        ignored_txt.write_text("hello\n")

        ignored_dir_txt = self._temp_dir / "ignoreddir" / "hello.txt"
        ignored_dir_txt.parent.mkdir()
        ignored_dir_txt.write_text("hello\n")

        grep_replace(pattern="hello", replacement="goodbye", paths=[self._temp_dir])

        self.assertEqual(ignored_txt.read_text(), "hello\n")
        self.assertEqual(ignored_dir_txt.read_text(), "hello\n")

    def test_grep_replace_does_not_modify_sapling_ignored_files_or_directories(
        self,
    ) -> None:
        subprocess.check_call(["sl", "init", "--git", "."], cwd=self._temp_dir)

        (self._temp_dir / ".gitignore").write_text("/ignoreddir/\nignored.txt\n")
        ignored_txt = self._temp_dir / "ignored.txt"
        ignored_txt.write_text("hello\n")

        ignored_dir_txt = self._temp_dir / "ignoreddir" / "hello.txt"
        ignored_dir_txt.parent.mkdir()
        ignored_dir_txt.write_text("hello\n")

        grep_replace(pattern="hello", replacement="goodbye", paths=[self._temp_dir])

        self.assertEqual(ignored_txt.read_text(), "hello\n")
        self.assertEqual(ignored_dir_txt.read_text(), "hello\n")


class GrepReplaceResult(typing.NamedTuple):
    changed_files: bool


def grep_replace(
    pattern: str, replacement: str, paths: typing.List[pathlib.Path]
) -> GrepReplaceResult:
    # NOTE(strager): Request --engine=default for rg. I *think* that is what sd
    # also uses.
    file_search = subprocess.run(
        [
            "rg",
            "--engine=default",
            "--files-with-matches",
            "--no-require-git",
            "--",
            pattern,
        ]
        + paths,
        capture_output=True,
        encoding="utf-8",
    )
    if file_search.returncode != 0 and file_search.stderr:
        file_search.check_returncode()
        assert False, "check_returncode should have thrown an exception."
    files_to_replace_in: typing.List[str] = file_search.stdout.splitlines()
    if not files_to_replace_in:
        return GrepReplaceResult(changed_files=False)

    subprocess.check_call(["sd", "--", pattern, replacement] + files_to_replace_in)
    return GrepReplaceResult(changed_files=True)


if __name__ == "__main__":
    main()
