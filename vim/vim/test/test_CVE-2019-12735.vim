function! Test_invulnerable_to_cve_2019_12735() abort
  " See: https://nvd.nist.gov/vuln/detail/CVE-2019-12735
  " See: https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
  let l:malicious_file_path = tempname()
  let l:evidence_file_path = tempname()
  let l:not_vulnerable_content = ['not vulnerable']
  call writefile(l:not_vulnerable_content, l:evidence_file_path)

  let l:malicious_content = printf(
    \ ':!echo vulnerable >%s || " %s',
    \ shellescape(l:evidence_file_path),
    \ 'vi:fen:fdm=expr:fde=execute("source\!\ \%"):fdl=0:fdt="',
  \ )
  call writefile([l:malicious_content], l:malicious_file_path)

  " Open the malicious file in another instance of Vim. Wait for the shellcode
  " to be executed. If the shellcode does execute, fail the test.
  " TODO(strager): This is test not fool-proof. Errors in vimrc could wait for
  " user input before the malicious file is even loaded.
  let l:vim_terminal = term_start([v:progpath, l:malicious_file_path])

  let l:timeout_seconds = 2
  let l:start_time = reltime()
  while v:true
    if readfile(l:evidence_file_path) !=# l:not_vulnerable_content
      break
    endif
    if reltimefloat(reltime(l:start_time)) >=# l:timeout_seconds
      break
    endif
    call term_wait(l:vim_terminal, 50)
  endwhile

  call assert_equal(l:not_vulnerable_content, readfile(l:evidence_file_path))
endfunction

call strager#test#run_all_tests()
