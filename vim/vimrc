""" General
set nocompatible

""" Plugins
" Let vimballs extract themselves in bundle/out/
" so we can play with them ourselves.
let g:vimball_home=$HOME."/.vim/bundle/out"

" Log Vim commands
if has('cmdlog')
    set cmdlogdir=~/.vimlogs/
    " set cmdloginsert
end

" Haskell mode
"let g:haddock_browser="nothing"

au BufEnter *.hs compiler ghcx

" Ack.vim
"let g:ackprg="ack-grep -H --nocolor --nogroup --column"
"let g:ackprg="ack -H --nocolor --nogroup --column"
let g:ackprg="ag --nocolor --nogroup --column"
nmap <unique> <Leader>a :Ack<SPACE>

" Pathogen, activate!
call pathogen#infect()

""" Whitespace, indention, etc.
set sw=4 sts=4 et
set ts=8
set nosmartindent
set cin noai
set tw=60 cc=60
set nojoinspaces

" g:StragerGetCStyleComments returns a list of 'comments parts. Use this
" function in ftplugin-s.
function g:StragerGetCStyleComments()
  return ['sO:*\ -', 'mO:*\ \ ', 'exO:*/', 's1:/*', 'mb:*', 'ex:*/', '://']
endfunction

" Copyright Saleem Abdulrasool <compnerd@compnerd.org>
command! GNUFormat :setlocal
    \ cinoptions=>2s,n-1s,{s,^-1s,:1s,=1s,g0,h1s,t0,+1s,(0,u0,w1,m1
    \ noexpandtab
    \ shiftwidth=2
    \ softtabstop=2
    \ tabstop=8

""" Text manipulation
set bs=indent,eol,start
set completeopt=menu,preview
set noesckeys

" Synchronize default Vim register and system clipboard.
set clipboard=unnamed

""" Text alignment
""" http://vim.wikia.com/wiki/Regex-based_text_alignment
command! -nargs=? -range Align <line1>,<line2>call AlignSection('<args>')
function! AlignSection(regex) range
  let extra = 1
  let sep = empty(a:regex) ? '=' : a:regex
  let maxpos = 0
  let section = getline(a:firstline, a:lastline)
  for line in section
    let pos = match(line, ' *'.sep)
    if maxpos < pos
      let maxpos = pos
    endif
  endfor
  call map(section, 'AlignLine(v:val, sep, maxpos, extra)')
  call setline(a:firstline, section)
endfunction

function! AlignLine(line, sep, maxpos, extra)
  let m = matchlist(a:line, '\(.\{-}\) \{-}\('.a:sep.'.*\)')
  if empty(m)
    return a:line
  endif
  let spaces = repeat(' ', a:maxpos - strlen(m[1]) + a:extra)
  return m[1] . spaces . m[2]
endfunction

" Make Y consistent with D (i.e. D : d$ :: Y : y$)
nmap <unique> Y y$

""" Navigation
set foldmethod=marker
if v:version >= 703
    set relativenumber
endif

" Sane searching
set hlsearch
set incsearch
set smartcase ignorecase
nmap <unique> <Leader>l :nohlsearch<CR>

" Save searches
set viminfo+=/200

" Use space to find space
" (Note the space after f, F)
" Kinda broken right now...
nmap <unique> <Space> ef<Space>

" Use tab for %
nnoremap <unique> <tab> %
vnoremap <unique> <tab> %

" Navigate jump list with \j, \k
nnoremap <unique> <Leader>j <C-I>
nnoremap <unique> <Leader>k <C-O>

""" Window and tab management
" Windows
nmap <unique> th <C-W>h
nmap <unique> tl <C-W>l
nmap <unique> tj <C-W>j
nmap <unique> tk <C-W>k
nmap <unique> ts :split<SPACE>
nmap <unique> tv :vsplit<SPACE>
nmap <unique> tc <C-W>c
set splitbelow splitright

" Tabs
nmap <unique> Th :tabp<CR>
nmap <unique> Tl :tabn<CR>
nmap <unique> Te :tabe<SPACE>
nmap <unique> Tn :tabe .<CR>
nmap <unique> Tc :tabc<CR>

nmap <unique> TH :tabp<CR>
nmap <unique> TL :tabn<CR>
nmap <unique> TE :tabe<SPACE>
nmap <unique> TN :tabe .<CR>
nmap <unique> TC :tabc<CR>

nmap <unique> tH :tabp<CR>
nmap <unique> tL :tabn<CR>
nmap <unique> tE :tabe<SPACE>
nmap <unique> tN :tabe .<CR>
nmap <unique> tC :tabc<CR>

nmap <unique> te :tabe<SPACE>

""" File management
set autowrite 

" Don't hide any files from completion.
set wildignore=

" Put swap files in ~/.vim/swap/.  Note the double /:
"
" > - For Unix and Win32, if a directory ends in two path separators "//"
" >  or "\\", the swap file name will be built from the complete path to
" >  the file with all path separators substituted to percent '%' signs.
" >  This will ensure file name uniqueness in the preserve directory.
set directory=~/.vim/swap//,.

" fzf
nmap <unique> ' :Buffers<CR>
nmap <unique> <C-P> :Files<CR>

""" Display
set nowrap
set ruler
set laststatus=2
set listchars+=precedes:<,extends:>
set sidescroll=5
set scrolloff=5
set shortmess=a     " Abbreviate status line
set shortmess+=tToO " Other crap

" filename [Help][-][RO]
set statusline=%<%f\ %h%m%r
" Line, col
set statusline+=%=%(%l,%c%V%)

""" Command line
set wildmenu
set wildmode=longest,full

" Save history
set history=200
set viminfo+=:200

""" Syntax hilighting
syntax on
filetype on
filetype indent on
filetype plugin on

au BufNewFile *.as set filetype=javascript
au BufRead *.as set filetype=javascript

" Prefer 8-color over 256-color. The colour scheme is tuned
" for 8-color with iTerm.
if &term =~ "xterm-256color"
  set term=xterm
endif

set background=dark
let g:solarized_termtrans=1
colorscheme solarized

highlight StatusLine ctermfg=82
highlight StatusLineNC ctermfg=81
highlight VertSplit ctermfg=16

let c_space_errors=1
let c_no_comment_fold=1
let c_no_if0_fold=1

set concealcursor=nv

""" Shortcuts
map <unique> <F1> <ESC>:make<CR>
set makeprg=make\ -j4\ -w
nmap <unique> <Leader>s vip:sort u<CR>
vmap <unique> <Leader>s :sort u<CR>
nmap <unique> <Leader>S vip:sort iu<CR>
vmap <unique> <Leader>S :sort iu<CR>
map <unique> <Leader>w :wa<CR>

" Git
nmap <unique> gs :!git status -s -b .<CR>
nmap <unique> gS :!git status -s -b<CR>
nmap <unique> gc :!git commit -v<CR>
nmap <unique> g. :!git add -p .<CR>
nmap <unique> g; :!git add -i .<CR>
nmap <unique> g? :!git diff .<CR>
nmap <unique> g/ :!git diff --cached .<CR>
nmap <unique> gv :!git pull --ff --commit<CR>
nmap <unique> g^ :!git push<CR>
nmap <unique> gP :!git checkout -p .<CR>

set shell=/bin/bash

" Paste toggle
nmap <unique> <Leader>p :set paste!<CR>

" Must be last.  Forgot why.
set exrc secure
